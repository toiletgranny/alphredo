#eff6ff,
#dbeafe,
#bfdbfe,
#93c5fd,
#60a5fa,
#3b82f6,
#2563eb,
#1d4ed8,
#1e40af,
#1e3a8a,

// V1

document.querySelectorAll(viewport.selectors.colorInput).forEach((input, i) => {
	const originalValue = input.value;
	input.addEventListener('change', () => {
		if (input.value === '') {
			palette.color.remove(i);
			renderDom(() => {
				document.querySelectorAll(viewport.selectors.colorInput)[i].select();
				document.querySelectorAll(viewport.selectors.colorRow)[i].classList.add('color-list__elem--move-up');
			});
		} else if (input.value.match(/^#([A-Fa-f0-9]{6})$/) || input.value.match(/^([A-Fa-f0-9]{6})$/)) { 
			if (i - palette.user.colors.length === 0) {
				if (input.value.match(/^([A-Fa-f0-9]{6})$/)) {
					palette.color.add("#" + input.value)
				} else {
					palette.color.add(input.value)
				};
				renderDom(() => {
					document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
					document.querySelectorAll(viewport.selectors.colorRow)[i+1].classList.add('color-list__elem--move-down');
				});
			} else { 
				if (input.value.match(/^([A-Fa-f0-9]{6})$/)) {
					palette.color.update("#" + input.value, i);
				} else {
					palette.color.update(input.value, i);
				};
				renderDom(() => {
					document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
				});
			};
		} else {
			input.value = originalValue;
			input.classList.add("input--error");
			Toast.render("🙏 Only HEX values, please!");
		}
	})
});

// V2

/*
[x] Jezeli jest wypelniony =>
[x] - Jezeli jest hexem => to upewnij sie, ze format jest prawidlowy i:
[x]   - Jezeli indeks jest istniejacy, to podmien kolor
[x]   - Jezeli indeks jest nowy, to dodaj kolor
[x] - Jezeli nie jest hexem => to wyrzuc blad i wrzuc w inputa poprzednia wartosc
[x] Jezeli jest pusty => to usun wiersz,
*/

document.querySelectorAll(viewport.selectors.colorInput).forEach((input, i) => {
	const oldValue = input.value;
	const hexFormats = [/^#([A-Fa-f0-9]{6})$/,/^([A-Fa-f0-9]{6})$/];
	input.addEventListener('change', () => {
		let newValue = input.value;
		if (newValue) {
			if (hexFormats.some(rx => rx.test(newValue))) {
				newValue = !hexFormats[0].test(newValue) ? "#" + newValue : newValue;
				if (i - palette.user.colors.length === 0) {
					palette.color.add(newValue);
					renderDom(() => {
						document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
						document.querySelectorAll(viewport.selectors.colorRow)[i+1].classList.add('color-list__elem--move-down');
					});
				} else {
					palette.color.update(newValue, i);
					renderDom(() => {
						document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
					});
				};
			} else {
				input.value = oldValue;
				input.classList.add("input--error");
				Toast.render("🙏 Only HEX values, please!");
			};
		} else {
			palette.color.remove(i);
			renderDom(() => {
				document.querySelectorAll(viewport.selectors.colorInput)[i].select();
				document.querySelectorAll(viewport.selectors.colorRow)[i].classList.add('color-list__elem--move-up');
			});
		}
	})
});

// V3

function validateHex(hex) {
	const hexFormats = [/^#([A-Fa-f0-9]{6})$/,/^([A-Fa-f0-9]{6})$/];
	if (hexFormats.some(rx => rx.test(hex))) {
		return hex = !hexFormats[0].test(hex) ? "#" + hex : hex;
	} else {
		return false
	};
}

document.querySelectorAll(viewport.selectors.colorInput).forEach((input, i) => {
	const oldValue = input.value;
	input.addEventListener('change', () => {
		const newValue = input.value;
		if (newValue) {
			const newHexValue = validateHex(newValue);
			if (newHexValue) {
				if (i - palette.user.colors.length === 0) {
					palette.color.add(newHexValue);
					renderDom(() => {
						document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
						document.querySelectorAll(viewport.selectors.colorRow)[i+1].classList.add('color-list__elem--move-down');
					});
				} else {
					palette.color.update(newHexValue, i);
					renderDom(() => {
						document.querySelectorAll(viewport.selectors.colorInput)[i+1].select();
					});
				};
			} else {
				input.value = oldValue;
				input.classList.add("input--error");
				Toast.render("🙏 Only HEX values, please!");
			};
		} else {
			palette.color.remove(i);
			renderDom(() => {
				document.querySelectorAll(viewport.selectors.colorInput)[i].select();
				document.querySelectorAll(viewport.selectors.colorRow)[i].classList.add('color-list__elem--move-up');
			});
		}
	})
});